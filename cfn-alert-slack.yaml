---
AWSTemplateFormatVersion: '2010-09-09'
Description: "Slack Alerts for Code Pipeline"

Parameters: 
  slackchannel: 
    Type: String
    Description: "Enter slack channel name"
  slackuser: 
    Type: String
    Description: "Enter slack user name"
  slackwebhookurl: 
    Type: String
    Description: "Enter webhook URL"

Resources:
  EventRule:
    Type: AWS::Events::Rule
    Properties: 
      Description: "EventRule"
      EventPattern: 
        source: 
          - "aws.codepipeline"
      Targets: 
        - 
          Arn:
            Fn::GetAtt: 
              - "alertslack"
              - "Arn"
          Id: "alertslack"
        
  PermissionForEventsToInvokeLambda: 
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt 
        - alertslack
        - Arn
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
            - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
              - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonKinesisFullAccess
      Path: /

  alertslack: 
    Type: "AWS::Lambda::Function"
    Properties: 
      Handler: "index.lambda_handler"
      Role: 
        Fn::GetAtt: 
          - "LambdaExecutionRole"
          - "Arn"
      Runtime: "python2.7"
      Timeout: 25
      Environment:
        Variables:
          SLACK_CHANNEL: 
            Ref: slackchannel
          SLACK_USER: 
            Ref: slackuser
          SLACK_WEBHOOK_URL: 
            Ref: slackwebhookurl
      Code:
          ZipFile: |
              import json
              import logging
              import os
              import boto3
              from urllib2 import Request, urlopen, URLError, HTTPError
              SLACK_WEBHOOK_URL = os.environ['SLACK_WEBHOOK_URL']
              SLACK_CHANNEL = os.environ['SLACK_CHANNEL']
              SLACK_USER = os.environ['SLACK_USER']
              logger = logging.getLogger()
              logger.setLevel(logging.INFO)
              def lambda_handler(event, context):
                  logger.info("Event:" + str(event))
                  if event['detail-type'] == 'CodePipeline Pipeline Execution State Change': 
                      message = "Pipeline: %s | State: %s" %(event['detail']['pipeline'], event['detail']['state'])
                  if event['detail-type'] == 'CodePipeline Stage Execution State Change':
                      message = "Pipeline: %s | Stage: %s | State: %s" %(event['detail']['pipeline'], event['detail']['stage'], event['detail']['state'])       
                  if event['detail-type'] == 'CodePipeline Action Execution State Change':
                      message = "Pipeline: %s | Stage: %s | Action: %s | Provider: %s | State: %s" %(event['detail']['pipeline'], event['detail']['stage'], event['detail']['action'],event['detail']['type']['provider'], event['detail']['state']) 
                  if event['detail']['state'] == 'STARTED': icon = ":black_medium_square: "
                  if event['detail']['state'] == 'SUCCEEDED': icon = ":white_check_mark: "
                  if event['detail']['state'] == 'RESUMED': icon = ":repeat: "
                  if event['detail']['state'] == 'SUPERSEDED': icon = ":clock1030: "
                  if event['detail']['state'] == 'FAILED': icon = ":red_circle: "
                  slack_message = {
                    'channel': SLACK_CHANNEL,
                    'username': SLACK_USER,
                    'text': "%s %s" %(icon, message)
                  }
                  req = Request(SLACK_WEBHOOK_URL, json.dumps(slack_message))
                  try:
                    response = urlopen(req)
                    response.read()
                    logger.info("Message posted to %s", slack_message['channel'])
                  except HTTPError as e:
                    logger.error("Request failed: %d %s", e.code, e.reason)
                  except URLError as e:
                    logger.error("Server connection failed: %s", e.reason)
